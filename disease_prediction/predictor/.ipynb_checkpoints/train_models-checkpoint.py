{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84ba4526-e259-4fd6-8a5f-bc09b50a9898",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "61696273-299f-4a62-9dea-a1ace925e9fe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "‚è≥ Training RandomForest model...\n",
      "‚úÖ RandomForest Model Trained Successfully!\n",
      "\n",
      "‚è≥ Training SVM model...\n",
      "‚úÖ SVM Model Trained Successfully!\n",
      "\n",
      "‚è≥ Training NaiveBayes model...\n",
      "‚úÖ NaiveBayes Model Trained Successfully!\n",
      "\n",
      "‚è≥ Training KNN model...\n",
      "‚úÖ KNN Model Trained Successfully!\n",
      "\n",
      "üîπ Model Evaluation Results:\n",
      "\n",
      "üìå RandomForest:\n",
      "   accuracy: 1.0000\n",
      "   precision: 1.0000\n",
      "   recall: 1.0000\n",
      "   f1_score: 1.0000\n",
      "\n",
      "üìå SVM:\n",
      "   accuracy: 0.9836\n",
      "   precision: 0.9891\n",
      "   recall: 0.9836\n",
      "   f1_score: 0.9825\n",
      "\n",
      "üìå NaiveBayes:\n",
      "   accuracy: 0.9672\n",
      "   precision: 0.9809\n",
      "   recall: 0.9672\n",
      "   f1_score: 0.9607\n",
      "\n",
      "üìå KNN:\n",
      "   accuracy: 0.9508\n",
      "   precision: 0.9672\n",
      "   recall: 0.9508\n",
      "   f1_score: 0.9399\n",
      "\n",
      "üèÜ Best Model: RandomForest (Saved as 'best_model.pkl')\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.naive_bayes import BernoulliNB\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "import joblib\n",
    "\n",
    "# Load dataset\n",
    "df = pd.read_csv('Training.csv')\n",
    "\n",
    "# üîπ STEP 1: CHECK FOR DUPLICATES & REMOVE IF NECESSARY\n",
    "df = df.drop_duplicates()\n",
    "\n",
    "# üîπ STEP 2: ENSURE STRATIFIED SPLIT TO AVOID CLASS IMBALANCE\n",
    "train_df, test_df = train_test_split(df, test_size=0.2, stratify=df['prognosis'], random_state=42)\n",
    "\n",
    "# üîπ STEP 3: LABEL ENCODING (ENSURE CONSISTENCY)\n",
    "label_encoder = LabelEncoder()\n",
    "train_df['prognosis'] = label_encoder.fit_transform(train_df['prognosis'])\n",
    "test_df['prognosis'] = label_encoder.transform(test_df['prognosis'])\n",
    "joblib.dump(label_encoder, 'label_encoder.pkl')\n",
    "\n",
    "# üîπ STEP 4: FEATURE SELECTION & PRESERVATION\n",
    "feature_columns = [col for col in df.columns if col != 'prognosis']  # Ensure all features are retained\n",
    "\n",
    "X_train = train_df[feature_columns].astype(float)\n",
    "X_test = test_df[feature_columns].astype(float)\n",
    "y_train = train_df['prognosis']\n",
    "y_test = test_df['prognosis']\n",
    "\n",
    "# Standard Scaling (Apply same scaler to train & test)\n",
    "scaler = StandardScaler()\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "X_test = scaler.transform(X_test)\n",
    "joblib.dump(scaler, 'scaler.pkl')\n",
    "\n",
    "# üîπ STEP 5: TRAIN MULTIPLE MODELS\n",
    "models = {\n",
    "    \"RandomForest\": RandomForestClassifier(n_estimators=100, random_state=42),\n",
    "    \"SVM\": SVC(kernel='linear', random_state=42),\n",
    "    \"NaiveBayes\": BernoulliNB(),\n",
    "    \"KNN\": KNeighborsClassifier(n_neighbors=10)\n",
    "}\n",
    "\n",
    "results = {}\n",
    "\n",
    "for name, model in models.items():\n",
    "    print(f\"\\n‚è≥ Training {name} model...\")\n",
    "    \n",
    "    model.fit(X_train, y_train)  # Train the model\n",
    "    y_pred = model.predict(X_test)  # Predict on test set\n",
    "\n",
    "    accuracy = accuracy_score(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred, average='weighted', zero_division=1)\n",
    "    recall = recall_score(y_test, y_pred, average='weighted', zero_division=1)\n",
    "    f1 = f1_score(y_test, y_pred, average='weighted', zero_division=1)\n",
    "\n",
    "    results[name] = {\"accuracy\": accuracy, \"precision\": precision, \"recall\": recall, \"f1_score\": f1}\n",
    "\n",
    "    print(f\"‚úÖ {name} Model Trained Successfully!\")\n",
    "\n",
    "# üîπ STEP 6: FIND BEST MODEL & SAVE IT\n",
    "best_model_name = max(results, key=lambda k: results[k]['accuracy'])\n",
    "best_model = models[best_model_name]\n",
    "joblib.dump(best_model, 'best_model.pkl')\n",
    "joblib.dump(feature_columns, 'feature_columns.pkl')  # Save feature names\n",
    "\n",
    "print(\"\\nüîπ Model Evaluation Results:\")\n",
    "for model, metrics in results.items():\n",
    "    print(f\"\\nüìå {model}:\")\n",
    "    for metric, value in metrics.items():\n",
    "        print(f\"   {metric}: {value:.4f}\")\n",
    "\n",
    "print(f\"\\nüèÜ Best Model: {best_model_name} (Saved as 'best_model.pkl')\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "979e285e-c209-405d-a87b-feedf76c6498",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
