{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84ba4526-e259-4fd6-8a5f-bc09b50a9898",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "61696273-299f-4a62-9dea-a1ace925e9fe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "‚è≥ Training RandomForest model...\n",
      "‚úÖ RandomForest Model Trained Successfully!\n",
      "\n",
      "‚è≥ Training SVM model...\n",
      "‚úÖ SVM Model Trained Successfully!\n",
      "\n",
      "‚è≥ Training NaiveBayes model...\n",
      "‚úÖ NaiveBayes Model Trained Successfully!\n",
      "\n",
      "‚è≥ Training KNN model...\n",
      "‚úÖ KNN Model Trained Successfully!\n",
      "\n",
      "üîπ Model Evaluation Results:\n",
      "\n",
      "üìå RandomForest:\n",
      "   accuracy: 1.0000\n",
      "   precision: 1.0000\n",
      "   recall: 1.0000\n",
      "   f1_score: 1.0000\n",
      "\n",
      "üìå SVM:\n",
      "   accuracy: 0.9836\n",
      "   precision: 0.9891\n",
      "   recall: 0.9836\n",
      "   f1_score: 0.9825\n",
      "\n",
      "üìå NaiveBayes:\n",
      "   accuracy: 0.9672\n",
      "   precision: 0.9809\n",
      "   recall: 0.9672\n",
      "   f1_score: 0.9607\n",
      "\n",
      "üìå KNN:\n",
      "   accuracy: 0.9508\n",
      "   precision: 0.9672\n",
      "   recall: 0.9508\n",
      "   f1_score: 0.9399\n",
      "\n",
      "üèÜ Best Model: RandomForest (Saved as 'best_model.pkl')\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.naive_bayes import BernoulliNB\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
    "import joblib\n",
    "\n",
    "# Load dataset\n",
    "df = pd.read_csv('Training.csv')\n",
    "\n",
    "# üîπ STEP 1: CHECK FOR DUPLICATES & REMOVE IF NECESSARY\n",
    "df = df.drop_duplicates()\n",
    "\n",
    "# üîπ STEP 2: ENSURE STRATIFIED SPLIT TO AVOID CLASS IMBALANCE\n",
    "train_df, test_df = train_test_split(df, test_size=0.2, stratify=df['prognosis'], random_state=42)\n",
    "\n",
    "# üîπ STEP 3: LABEL ENCODING (ENSURE CONSISTENCY)\n",
    "label_encoder = LabelEncoder()\n",
    "train_df['prognosis'] = label_encoder.fit_transform(train_df['prognosis'])\n",
    "test_df['prognosis'] = label_encoder.transform(test_df['prognosis'])\n",
    "joblib.dump(label_encoder, 'label_encoder.pkl')\n",
    "\n",
    "# üîπ STEP 4: FEATURE SELECTION & PRESERVATION\n",
    "feature_columns = [col for col in df.columns if col != 'prognosis']  # Ensure all features are retained\n",
    "\n",
    "X_train = train_df[feature_columns].astype(float)\n",
    "X_test = test_df[feature_columns].astype(float)\n",
    "y_train = train_df['prognosis']\n",
    "y_test = test_df['prognosis']\n",
    "\n",
    "# Standard Scaling (Apply same scaler to train & test)\n",
    "scaler = StandardScaler()\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "X_test = scaler.transform(X_test)\n",
    "joblib.dump(scaler, 'scaler.pkl')\n",
    "\n",
    "# üîπ STEP 5: TRAIN MULTIPLE MODELS\n",
    "models = {\n",
    "    \"RandomForest\": RandomForestClassifier(n_estimators=100, random_state=42),\n",
    "    \"SVM\": SVC(kernel='linear', random_state=42),\n",
    "    \"NaiveBayes\": BernoulliNB(),\n",
    "    \"KNN\": KNeighborsClassifier(n_neighbors=10)\n",
    "}\n",
    "\n",
    "results = {}\n",
    "\n",
    "for name, model in models.items():\n",
    "    print(f\"\\n‚è≥ Training {name} model...\")\n",
    "    \n",
    "    model.fit(X_train, y_train)  # Train the model\n",
    "    y_pred = model.predict(X_test)  # Predict on test set\n",
    "\n",
    "    accuracy = accuracy_score(y_test, y_pred)\n",
    "    precision = precision_score(y_test, y_pred, average='weighted', zero_division=1)\n",
    "    recall = recall_score(y_test, y_pred, average='weighted', zero_division=1)\n",
    "    f1 = f1_score(y_test, y_pred, average='weighted', zero_division=1)\n",
    "\n",
    "    results[name] = {\"accuracy\": accuracy, \"precision\": precision, \"recall\": recall, \"f1_score\": f1}\n",
    "\n",
    "    print(f\"‚úÖ {name} Model Trained Successfully!\")\n",
    "\n",
    "# üîπ STEP 6: FIND BEST MODEL & SAVE IT\n",
    "best_model_name = max(results, key=lambda k: results[k]['accuracy'])\n",
    "best_model = models[best_model_name]\n",
    "joblib.dump(best_model, 'best_model.pkl')\n",
    "joblib.dump(feature_columns, 'feature_columns.pkl')  # Save feature names\n",
    "\n",
    "print(\"\\nüîπ Model Evaluation Results:\")\n",
    "for model, metrics in results.items():\n",
    "    print(f\"\\nüìå {model}:\")\n",
    "    for metric, value in metrics.items():\n",
    "        print(f\"   {metric}: {value:.4f}\")\n",
    "\n",
    "print(f\"\\nüèÜ Best Model: {best_model_name} (Saved as 'best_model.pkl')\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "979e285e-c209-405d-a87b-feedf76c6498",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature Columns Loaded: ['itching', 'skin_rash', 'nodal_skin_eruptions', 'continuous_sneezing', 'shivering', 'chills', 'joint_pain', 'stomach_pain', 'acidity', 'ulcers_on_tongue', 'muscle_wasting', 'vomiting', 'burning_micturition', 'spotting_ urination', 'fatigue', 'weight_gain', 'anxiety', 'cold_hands_and_feets', 'mood_swings', 'weight_loss', 'restlessness', 'lethargy', 'patches_in_throat', 'irregular_sugar_level', 'cough', 'high_fever', 'sunken_eyes', 'breathlessness', 'sweating', 'dehydration', 'indigestion', 'headache', 'yellowish_skin', 'dark_urine', 'nausea', 'loss_of_appetite', 'pain_behind_the_eyes', 'back_pain', 'constipation', 'abdominal_pain', 'diarrhoea', 'mild_fever', 'yellow_urine', 'yellowing_of_eyes', 'acute_liver_failure', 'fluid_overload', 'swelling_of_stomach', 'swelled_lymph_nodes', 'malaise', 'blurred_and_distorted_vision', 'phlegm', 'throat_irritation', 'redness_of_eyes', 'sinus_pressure', 'runny_nose', 'congestion', 'chest_pain', 'weakness_in_limbs', 'fast_heart_rate', 'pain_during_bowel_movements', 'pain_in_anal_region', 'bloody_stool', 'irritation_in_anus', 'neck_pain', 'dizziness', 'cramps', 'bruising', 'obesity', 'swollen_legs', 'swollen_blood_vessels', 'puffy_face_and_eyes', 'enlarged_thyroid', 'brittle_nails', 'swollen_extremeties', 'excessive_hunger', 'extra_marital_contacts', 'drying_and_tingling_lips', 'slurred_speech', 'knee_pain', 'hip_joint_pain', 'muscle_weakness', 'stiff_neck', 'swelling_joints', 'movement_stiffness', 'spinning_movements', 'loss_of_balance', 'unsteadiness', 'weakness_of_one_body_side', 'loss_of_smell', 'bladder_discomfort', 'foul_smell_of urine', 'continuous_feel_of_urine', 'passage_of_gases', 'internal_itching', 'toxic_look_(typhos)', 'depression', 'irritability', 'muscle_pain', 'altered_sensorium', 'red_spots_over_body', 'belly_pain', 'abnormal_menstruation', 'dischromic _patches', 'watering_from_eyes', 'increased_appetite', 'polyuria', 'family_history', 'mucoid_sputum', 'rusty_sputum', 'lack_of_concentration', 'visual_disturbances', 'receiving_blood_transfusion', 'receiving_unsterile_injections', 'coma', 'stomach_bleeding', 'distention_of_abdomen', 'history_of_alcohol_consumption', 'fluid_overload.1', 'blood_in_sputum', 'prominent_veins_on_calf', 'palpitations', 'painful_walking', 'pus_filled_pimples', 'blackheads', 'scurring', 'skin_peeling', 'silver_like_dusting', 'small_dents_in_nails', 'inflammatory_nails', 'blister', 'red_sore_around_nose', 'yellow_crust_ooze']\n"
     ]
    }
   ],
   "source": [
    "from django.shortcuts import render\n",
    "from django.http import JsonResponse\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import joblib\n",
    "\n",
    "# Load trained model & preprocessing objects\n",
    "try:\n",
    "    model = joblib.load('best_model.pkl')\n",
    "    scaler = joblib.load('scaler.pkl')\n",
    "    label_encoder = joblib.load('label_encoder.pkl')\n",
    "    feature_columns = joblib.load('feature_columns.pkl')  # Load saved feature names\n",
    "    print(\"Feature Columns Loaded:\", feature_columns)  # Debugging step\n",
    "except Exception as e:\n",
    "    print(\"Error loading model or preprocessing objects:\", str(e))\n",
    "\n",
    "def predict_disease(request):\n",
    "    if request.method == \"POST\":\n",
    "        try:\n",
    "            data = request.POST  # Get form data\n",
    "            print(\"Received Data:\", data)  # Debugging step\n",
    "\n",
    "            # Extract symptoms from the request\n",
    "            selected_symptoms = [data.get(f\"Symptom_{i}\") for i in range(1, 6) if data.get(f\"Symptom_{i}\")]\n",
    "            print(\"Selected Symptoms:\", selected_symptoms)  # Debugging step\n",
    "\n",
    "            # Initialize input vector with zeros\n",
    "            symptoms_list = [0] * len(feature_columns)\n",
    "\n",
    "            # Map selected symptoms to their indices in feature_columns\n",
    "            for symptom in selected_symptoms:\n",
    "                if symptom in feature_columns:\n",
    "                    index = feature_columns.index(symptom)\n",
    "                    symptoms_list[index] = 1\n",
    "                else:\n",
    "                    print(f\"Warning: {symptom} not found in feature_columns list\")\n",
    "\n",
    "            print(\"Processed Symptoms (Feature Vector):\", symptoms_list)  # Debugging step\n",
    "\n",
    "            # Ensure at least one symptom is selected\n",
    "            if not any(symptoms_list):\n",
    "                return JsonResponse({\"error\": \"No symptoms selected!\"})\n",
    "\n",
    "            # Convert to DataFrame with correct column names\n",
    "            input_df = pd.DataFrame([symptoms_list], columns=feature_columns)\n",
    "\n",
    "            # Apply the same scaling as during training\n",
    "            input_scaled = scaler.transform(input_df)\n",
    "\n",
    "            # Predict the disease\n",
    "            prediction = model.predict(input_scaled)[0]\n",
    "            disease_name = label_encoder.inverse_transform([prediction])[0]\n",
    "\n",
    "            return JsonResponse({\"disease\": disease_name})\n",
    "\n",
    "        except Exception as e:\n",
    "            print(\"Error:\", str(e))  # Debugging step\n",
    "            return JsonResponse({\"error\": str(e)})\n",
    "\n",
    "    return render(request, 'predictor/predict.html')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9a7d0af6-0afb-445b-9a73-b14b8b3d1c0c",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'selected_symptoms' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[23], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mSelected Symptoms:\u001b[39m\u001b[38;5;124m\"\u001b[39m, selected_symptoms)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'selected_symptoms' is not defined"
     ]
    }
   ],
   "source": [
    "print(\"All Symptoms List:\", symptoms_list)  # Check if this list is populated\n",
    "print(\"Selected Symptoms:\", selected_symptoms)  # Check what symptoms were selected\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "ed2dd3be-ce9c-43b0-bb69-f714aeac9a19",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "‚úÖ Model and preprocessing files loaded successfully.\n",
      "üîπ Feature Columns: ['itching', 'skin_rash', 'nodal_skin_eruptions', 'continuous_sneezing', 'shivering', 'chills', 'joint_pain', 'stomach_pain', 'acidity', 'ulcers_on_tongue', 'muscle_wasting', 'vomiting', 'burning_micturition', 'spotting_ urination', 'fatigue', 'weight_gain', 'anxiety', 'cold_hands_and_feets', 'mood_swings', 'weight_loss', 'restlessness', 'lethargy', 'patches_in_throat', 'irregular_sugar_level', 'cough', 'high_fever', 'sunken_eyes', 'breathlessness', 'sweating', 'dehydration', 'indigestion', 'headache', 'yellowish_skin', 'dark_urine', 'nausea', 'loss_of_appetite', 'pain_behind_the_eyes', 'back_pain', 'constipation', 'abdominal_pain', 'diarrhoea', 'mild_fever', 'yellow_urine', 'yellowing_of_eyes', 'acute_liver_failure', 'fluid_overload', 'swelling_of_stomach', 'swelled_lymph_nodes', 'malaise', 'blurred_and_distorted_vision', 'phlegm', 'throat_irritation', 'redness_of_eyes', 'sinus_pressure', 'runny_nose', 'congestion', 'chest_pain', 'weakness_in_limbs', 'fast_heart_rate', 'pain_during_bowel_movements', 'pain_in_anal_region', 'bloody_stool', 'irritation_in_anus', 'neck_pain', 'dizziness', 'cramps', 'bruising', 'obesity', 'swollen_legs', 'swollen_blood_vessels', 'puffy_face_and_eyes', 'enlarged_thyroid', 'brittle_nails', 'swollen_extremeties', 'excessive_hunger', 'extra_marital_contacts', 'drying_and_tingling_lips', 'slurred_speech', 'knee_pain', 'hip_joint_pain', 'muscle_weakness', 'stiff_neck', 'swelling_joints', 'movement_stiffness', 'spinning_movements', 'loss_of_balance', 'unsteadiness', 'weakness_of_one_body_side', 'loss_of_smell', 'bladder_discomfort', 'foul_smell_of urine', 'continuous_feel_of_urine', 'passage_of_gases', 'internal_itching', 'toxic_look_(typhos)', 'depression', 'irritability', 'muscle_pain', 'altered_sensorium', 'red_spots_over_body', 'belly_pain', 'abnormal_menstruation', 'dischromic _patches', 'watering_from_eyes', 'increased_appetite', 'polyuria', 'family_history', 'mucoid_sputum', 'rusty_sputum', 'lack_of_concentration', 'visual_disturbances', 'receiving_blood_transfusion', 'receiving_unsterile_injections', 'coma', 'stomach_bleeding', 'distention_of_abdomen', 'history_of_alcohol_consumption', 'fluid_overload.1', 'blood_in_sputum', 'prominent_veins_on_calf', 'palpitations', 'painful_walking', 'pus_filled_pimples', 'blackheads', 'scurring', 'skin_peeling', 'silver_like_dusting', 'small_dents_in_nails', 'inflammatory_nails', 'blister', 'red_sore_around_nose', 'yellow_crust_ooze']\n"
     ]
    }
   ],
   "source": [
    "from django.shortcuts import render\n",
    "from django.http import JsonResponse\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import joblib\n",
    "import os  # Added to check file existence\n",
    "\n",
    "# Load trained model & preprocessing objects\n",
    "try:\n",
    "    model_path = 'best_model.pkl'\n",
    "    scaler_path = 'scaler.pkl'\n",
    "    encoder_path = 'label_encoder.pkl'\n",
    "    features_path = 'feature_columns.pkl'\n",
    "\n",
    "    if not all(os.path.exists(path) for path in [model_path, scaler_path, encoder_path, features_path]):\n",
    "        raise FileNotFoundError(\"One or more model files are missing!\")\n",
    "\n",
    "    model = joblib.load(model_path)\n",
    "    scaler = joblib.load(scaler_path)\n",
    "    label_encoder = joblib.load(encoder_path)\n",
    "    feature_columns = joblib.load(features_path)\n",
    "\n",
    "    print(\"‚úÖ Model and preprocessing files loaded successfully.\")\n",
    "    print(\"üîπ Feature Columns:\", feature_columns)  # Debugging: Print feature columns\n",
    "except Exception as e:\n",
    "    print(f\"‚ùå Error loading model or preprocessing objects: {e}\")\n",
    "    feature_columns = []  # Ensure it is defined even if loading fails\n",
    "\n",
    "def predict_disease(request):\n",
    "    if request.method == \"POST\":\n",
    "        try:\n",
    "            if not feature_columns:  # Ensure feature_columns is loaded\n",
    "                return JsonResponse({\"error\": \"Feature columns not loaded. Check feature_columns.pkl.\"})\n",
    "\n",
    "            data = request.POST\n",
    "            print(\"üì• Received Data:\", data)  # Debugging\n",
    "\n",
    "            # Extract symptoms from request\n",
    "            selected_symptoms = [data.get(f\"Symptom_{i}\") for i in range(1, 6) if data.get(f\"Symptom_{i}\")]\n",
    "            print(\"üîπ Selected Symptoms:\", selected_symptoms)  # Debugging\n",
    "\n",
    "            # Initialize feature vector with zeros\n",
    "            symptoms_list = [0] * len(feature_columns)\n",
    "\n",
    "            # Map selected symptoms to feature_columns\n",
    "            for symptom in selected_symptoms:\n",
    "                if symptom in feature_columns:\n",
    "                    index = feature_columns.index(symptom)\n",
    "                    symptoms_list[index] = 1\n",
    "                else:\n",
    "                    print(f\"‚ö†Ô∏è Warning: {symptom} not found in feature_columns list\")\n",
    "\n",
    "            print(\"üîπ Processed Symptoms Vector:\", symptoms_list)  # Debugging\n",
    "\n",
    "            if not any(symptoms_list):\n",
    "                return JsonResponse({\"error\": \"No symptoms selected!\"})\n",
    "\n",
    "            # Convert to DataFrame\n",
    "            input_df = pd.DataFrame([symptoms_list], columns=feature_columns)\n",
    "\n",
    "            # Scale input data\n",
    "            input_scaled = scaler.transform(input_df)\n",
    "\n",
    "            # Predict disease\n",
    "            prediction = model.predict(input_scaled)[0]\n",
    "            disease_name = label_encoder.inverse_transform([prediction])[0]\n",
    "\n",
    "            return JsonResponse({\"disease\": disease_name})\n",
    "\n",
    "        except Exception as e:\n",
    "            print(f\"‚ùå Error: {e}\")\n",
    "            return JsonResponse({\"error\": str(e)})\n",
    "\n",
    "    return render(request, 'predictor/predict.html')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "209c8f2d-6a22-441a-8465-618cad1bce49",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature Columns: ['itching', 'skin_rash', 'nodal_skin_eruptions', 'continuous_sneezing', 'shivering', 'chills', 'joint_pain', 'stomach_pain', 'acidity', 'ulcers_on_tongue', 'muscle_wasting', 'vomiting', 'burning_micturition', 'spotting_ urination', 'fatigue', 'weight_gain', 'anxiety', 'cold_hands_and_feets', 'mood_swings', 'weight_loss', 'restlessness', 'lethargy', 'patches_in_throat', 'irregular_sugar_level', 'cough', 'high_fever', 'sunken_eyes', 'breathlessness', 'sweating', 'dehydration', 'indigestion', 'headache', 'yellowish_skin', 'dark_urine', 'nausea', 'loss_of_appetite', 'pain_behind_the_eyes', 'back_pain', 'constipation', 'abdominal_pain', 'diarrhoea', 'mild_fever', 'yellow_urine', 'yellowing_of_eyes', 'acute_liver_failure', 'fluid_overload', 'swelling_of_stomach', 'swelled_lymph_nodes', 'malaise', 'blurred_and_distorted_vision', 'phlegm', 'throat_irritation', 'redness_of_eyes', 'sinus_pressure', 'runny_nose', 'congestion', 'chest_pain', 'weakness_in_limbs', 'fast_heart_rate', 'pain_during_bowel_movements', 'pain_in_anal_region', 'bloody_stool', 'irritation_in_anus', 'neck_pain', 'dizziness', 'cramps', 'bruising', 'obesity', 'swollen_legs', 'swollen_blood_vessels', 'puffy_face_and_eyes', 'enlarged_thyroid', 'brittle_nails', 'swollen_extremeties', 'excessive_hunger', 'extra_marital_contacts', 'drying_and_tingling_lips', 'slurred_speech', 'knee_pain', 'hip_joint_pain', 'muscle_weakness', 'stiff_neck', 'swelling_joints', 'movement_stiffness', 'spinning_movements', 'loss_of_balance', 'unsteadiness', 'weakness_of_one_body_side', 'loss_of_smell', 'bladder_discomfort', 'foul_smell_of urine', 'continuous_feel_of_urine', 'passage_of_gases', 'internal_itching', 'toxic_look_(typhos)', 'depression', 'irritability', 'muscle_pain', 'altered_sensorium', 'red_spots_over_body', 'belly_pain', 'abnormal_menstruation', 'dischromic _patches', 'watering_from_eyes', 'increased_appetite', 'polyuria', 'family_history', 'mucoid_sputum', 'rusty_sputum', 'lack_of_concentration', 'visual_disturbances', 'receiving_blood_transfusion', 'receiving_unsterile_injections', 'coma', 'stomach_bleeding', 'distention_of_abdomen', 'history_of_alcohol_consumption', 'fluid_overload.1', 'blood_in_sputum', 'prominent_veins_on_calf', 'palpitations', 'painful_walking', 'pus_filled_pimples', 'blackheads', 'scurring', 'skin_peeling', 'silver_like_dusting', 'small_dents_in_nails', 'inflammatory_nails', 'blister', 'red_sore_around_nose', 'yellow_crust_ooze']\n"
     ]
    }
   ],
   "source": [
    "import joblib\n",
    "import pandas as pd\n",
    "\n",
    "# Load preprocessing objects\n",
    "feature_columns = joblib.load(\"feature_columns.pkl\")  # Ensure this file exists\n",
    "print(\"Feature Columns:\", feature_columns)  # Debugging\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "40af6e8b-0b3e-4830-9437-e4ff4133ff12",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected Symptoms: ['itching', 'skin_rash', 'nodal_skin_eruptions']\n"
     ]
    }
   ],
   "source": [
    "# Simulating user input (Example: User selects 3 symptoms)\n",
    "data = {\n",
    "    \"Symptom_1\": \"itching\",\n",
    "    \"Symptom_2\": \"skin_rash\",\n",
    "    \"Symptom_3\": \"nodal_skin_eruptions\",\n",
    "}\n",
    "\n",
    "# Extract selected symptoms\n",
    "selected_symptoms = [data.get(f\"Symptom_{i}\") for i in range(1, 6) if data.get(f\"Symptom_{i}\")]\n",
    "\n",
    "print(\"Selected Symptoms:\", selected_symptoms)  # Debugging\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "24443fda-fde6-45e1-ac6a-8a14afbca28b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processed Symptoms Vector: [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
     ]
    }
   ],
   "source": [
    "# Initialize feature vector with zeros\n",
    "symptoms_list = [0] * len(feature_columns)\n",
    "\n",
    "# Map selected symptoms to feature_columns\n",
    "for symptom in selected_symptoms:\n",
    "    if symptom in feature_columns:\n",
    "        index = feature_columns.index(symptom)\n",
    "        symptoms_list[index] = 1\n",
    "    else:\n",
    "        print(f\"‚ö†Ô∏è Warning: {symptom} not found in feature_columns\")\n",
    "\n",
    "print(\"Processed Symptoms Vector:\", symptoms_list)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "4e210885-c8dd-4a89-9e0a-eb95ba0eeeb2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "‚úÖ Symptoms detected, proceeding with prediction...\n"
     ]
    }
   ],
   "source": [
    "if not any(symptoms_list):\n",
    "    print(\"‚ö†Ô∏è No symptoms were selected!\")\n",
    "else:\n",
    "    print(\"‚úÖ Symptoms detected, proceeding with prediction...\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "6ad911da-c643-48ea-a6b2-4ad8f4cdbbf5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature Columns from .pkl file: ['itching', 'skin_rash', 'nodal_skin_eruptions', 'continuous_sneezing', 'shivering', 'chills', 'joint_pain', 'stomach_pain', 'acidity', 'ulcers_on_tongue', 'muscle_wasting', 'vomiting', 'burning_micturition', 'spotting_ urination', 'fatigue', 'weight_gain', 'anxiety', 'cold_hands_and_feets', 'mood_swings', 'weight_loss', 'restlessness', 'lethargy', 'patches_in_throat', 'irregular_sugar_level', 'cough', 'high_fever', 'sunken_eyes', 'breathlessness', 'sweating', 'dehydration', 'indigestion', 'headache', 'yellowish_skin', 'dark_urine', 'nausea', 'loss_of_appetite', 'pain_behind_the_eyes', 'back_pain', 'constipation', 'abdominal_pain', 'diarrhoea', 'mild_fever', 'yellow_urine', 'yellowing_of_eyes', 'acute_liver_failure', 'fluid_overload', 'swelling_of_stomach', 'swelled_lymph_nodes', 'malaise', 'blurred_and_distorted_vision', 'phlegm', 'throat_irritation', 'redness_of_eyes', 'sinus_pressure', 'runny_nose', 'congestion', 'chest_pain', 'weakness_in_limbs', 'fast_heart_rate', 'pain_during_bowel_movements', 'pain_in_anal_region', 'bloody_stool', 'irritation_in_anus', 'neck_pain', 'dizziness', 'cramps', 'bruising', 'obesity', 'swollen_legs', 'swollen_blood_vessels', 'puffy_face_and_eyes', 'enlarged_thyroid', 'brittle_nails', 'swollen_extremeties', 'excessive_hunger', 'extra_marital_contacts', 'drying_and_tingling_lips', 'slurred_speech', 'knee_pain', 'hip_joint_pain', 'muscle_weakness', 'stiff_neck', 'swelling_joints', 'movement_stiffness', 'spinning_movements', 'loss_of_balance', 'unsteadiness', 'weakness_of_one_body_side', 'loss_of_smell', 'bladder_discomfort', 'foul_smell_of urine', 'continuous_feel_of_urine', 'passage_of_gases', 'internal_itching', 'toxic_look_(typhos)', 'depression', 'irritability', 'muscle_pain', 'altered_sensorium', 'red_spots_over_body', 'belly_pain', 'abnormal_menstruation', 'dischromic _patches', 'watering_from_eyes', 'increased_appetite', 'polyuria', 'family_history', 'mucoid_sputum', 'rusty_sputum', 'lack_of_concentration', 'visual_disturbances', 'receiving_blood_transfusion', 'receiving_unsterile_injections', 'coma', 'stomach_bleeding', 'distention_of_abdomen', 'history_of_alcohol_consumption', 'fluid_overload.1', 'blood_in_sputum', 'prominent_veins_on_calf', 'palpitations', 'painful_walking', 'pus_filled_pimples', 'blackheads', 'scurring', 'skin_peeling', 'silver_like_dusting', 'small_dents_in_nails', 'inflammatory_nails', 'blister', 'red_sore_around_nose', 'yellow_crust_ooze']\n",
      "Manually checking if 'itching' exists: True\n"
     ]
    }
   ],
   "source": [
    "print(\"Feature Columns from .pkl file:\", feature_columns)\n",
    "print(\"Manually checking if 'itching' exists:\", 'itching' in feature_columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "9143d048-1551-453d-9458-7c1800d02470",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "üîç Checking file existence:\n",
      "üìÇ Model exists: True | Path: C:/Users/KIIT/Documents/Major/disease_prediction\\predictor\\best_model.pkl\n",
      "üìÇ Scaler exists: True | Path: C:/Users/KIIT/Documents/Major/disease_prediction\\predictor\\scaler.pkl\n",
      "üìÇ Encoder exists: True | Path: C:/Users/KIIT/Documents/Major/disease_prediction\\predictor\\label_encoder.pkl\n",
      "üìÇ Feature Columns exist: True | Path: C:/Users/KIIT/Documents/Major/disease_prediction\\predictor\\feature_columns.pkl\n",
      "‚úÖ Model and preprocessing files loaded successfully.\n",
      "üîπ Feature Columns: ['itching', 'skin_rash', 'nodal_skin_eruptions', 'continuous_sneezing', 'shivering', 'chills', 'joint_pain', 'stomach_pain', 'acidity', 'ulcers_on_tongue', 'muscle_wasting', 'vomiting', 'burning_micturition', 'spotting_ urination', 'fatigue', 'weight_gain', 'anxiety', 'cold_hands_and_feets', 'mood_swings', 'weight_loss', 'restlessness', 'lethargy', 'patches_in_throat', 'irregular_sugar_level', 'cough', 'high_fever', 'sunken_eyes', 'breathlessness', 'sweating', 'dehydration', 'indigestion', 'headache', 'yellowish_skin', 'dark_urine', 'nausea', 'loss_of_appetite', 'pain_behind_the_eyes', 'back_pain', 'constipation', 'abdominal_pain', 'diarrhoea', 'mild_fever', 'yellow_urine', 'yellowing_of_eyes', 'acute_liver_failure', 'fluid_overload', 'swelling_of_stomach', 'swelled_lymph_nodes', 'malaise', 'blurred_and_distorted_vision', 'phlegm', 'throat_irritation', 'redness_of_eyes', 'sinus_pressure', 'runny_nose', 'congestion', 'chest_pain', 'weakness_in_limbs', 'fast_heart_rate', 'pain_during_bowel_movements', 'pain_in_anal_region', 'bloody_stool', 'irritation_in_anus', 'neck_pain', 'dizziness', 'cramps', 'bruising', 'obesity', 'swollen_legs', 'swollen_blood_vessels', 'puffy_face_and_eyes', 'enlarged_thyroid', 'brittle_nails', 'swollen_extremeties', 'excessive_hunger', 'extra_marital_contacts', 'drying_and_tingling_lips', 'slurred_speech', 'knee_pain', 'hip_joint_pain', 'muscle_weakness', 'stiff_neck', 'swelling_joints', 'movement_stiffness', 'spinning_movements', 'loss_of_balance', 'unsteadiness', 'weakness_of_one_body_side', 'loss_of_smell', 'bladder_discomfort', 'foul_smell_of urine', 'continuous_feel_of_urine', 'passage_of_gases', 'internal_itching', 'toxic_look_(typhos)', 'depression', 'irritability', 'muscle_pain', 'altered_sensorium', 'red_spots_over_body', 'belly_pain', 'abnormal_menstruation', 'dischromic _patches', 'watering_from_eyes', 'increased_appetite', 'polyuria', 'family_history', 'mucoid_sputum', 'rusty_sputum', 'lack_of_concentration', 'visual_disturbances', 'receiving_blood_transfusion', 'receiving_unsterile_injections', 'coma', 'stomach_bleeding', 'distention_of_abdomen', 'history_of_alcohol_consumption', 'fluid_overload.1', 'blood_in_sputum', 'prominent_veins_on_calf', 'palpitations', 'painful_walking', 'pus_filled_pimples', 'blackheads', 'scurring', 'skin_peeling', 'silver_like_dusting', 'small_dents_in_nails', 'inflammatory_nails', 'blister', 'red_sore_around_nose', 'yellow_crust_ooze']\n"
     ]
    }
   ],
   "source": [
    "from django.shortcuts import render\n",
    "from django.http import JsonResponse\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import joblib\n",
    "import os  # Added to check file existence\n",
    "\n",
    "# Get the absolute path of the predictor app\n",
    "BASE_DIR = \"C:/Users/KIIT/Documents/Major/disease_prediction\"\n",
    "PREDICTOR_DIR = os.path.join(BASE_DIR, \"predictor\")  # Path to predictor app\n",
    "\n",
    "# Load trained model & preprocessing objects\n",
    "try:\n",
    "    model_path = os.path.join(PREDICTOR_DIR, \"best_model.pkl\")\n",
    "    scaler_path = os.path.join(PREDICTOR_DIR, \"scaler.pkl\")\n",
    "    encoder_path = os.path.join(PREDICTOR_DIR, \"label_encoder.pkl\")\n",
    "    features_path = os.path.join(PREDICTOR_DIR, \"feature_columns.pkl\")\n",
    "\n",
    "    print(\"üîç Checking file existence:\")\n",
    "    print(f\"üìÇ Model exists: {os.path.exists(model_path)} | Path: {model_path}\")\n",
    "    print(f\"üìÇ Scaler exists: {os.path.exists(scaler_path)} | Path: {scaler_path}\")\n",
    "    print(f\"üìÇ Encoder exists: {os.path.exists(encoder_path)} | Path: {encoder_path}\")\n",
    "    print(f\"üìÇ Feature Columns exist: {os.path.exists(features_path)} | Path: {features_path}\")\n",
    "\n",
    "    if not all(os.path.exists(path) for path in [model_path, scaler_path, encoder_path, features_path]):\n",
    "        raise FileNotFoundError(\"One or more model files are missing!\")\n",
    "\n",
    "    model = joblib.load(model_path)\n",
    "    scaler = joblib.load(scaler_path)\n",
    "    label_encoder = joblib.load(encoder_path)\n",
    "    feature_columns = joblib.load(features_path)\n",
    "\n",
    "    print(\"‚úÖ Model and preprocessing files loaded successfully.\")\n",
    "    print(\"üîπ Feature Columns:\", feature_columns)  # Debugging: Print feature columns\n",
    "except Exception as e:\n",
    "    print(f\"‚ùå Error loading model or preprocessing objects: {e}\")\n",
    "    feature_columns = []  # Ensure it is defined even if loading fails\n",
    "\n",
    "def predict_disease(request):\n",
    "    if request.method == \"POST\":\n",
    "        try:\n",
    "            if not feature_columns:  # Ensure feature_columns is loaded\n",
    "                return JsonResponse({\"error\": \"Feature columns not loaded. Check feature_columns.pkl.\"})\n",
    "\n",
    "            data = request.POST\n",
    "            print(\"üì• Received Data:\", data)  # Debugging\n",
    "\n",
    "            # Extract symptoms from request\n",
    "            selected_symptoms = [data.get(f\"Symptom_{i}\") for i in range(1, 6) if data.get(f\"Symptom_{i}\")]\n",
    "            print(\"üîπ Selected Symptoms:\", selected_symptoms)  # Debugging\n",
    "\n",
    "            # Initialize feature vector with zeros\n",
    "            symptoms_list = [0] * len(feature_columns)\n",
    "\n",
    "            # Map selected symptoms to feature_columns\n",
    "            for symptom in selected_symptoms:\n",
    "                if symptom in feature_columns:\n",
    "                    index = feature_columns.index(symptom)\n",
    "                    symptoms_list[index] = 1\n",
    "                else:\n",
    "                    print(f\"‚ö†Ô∏è Warning: {symptom} not found in feature_columns list\")\n",
    "\n",
    "            print(\"üîπ Processed Symptoms Vector:\", symptoms_list)  # Debugging\n",
    "\n",
    "            if not any(symptoms_list):\n",
    "                return JsonResponse({\"error\": \"No symptoms selected!\"})\n",
    "\n",
    "            # Convert to DataFrame\n",
    "            input_df = pd.DataFrame([symptoms_list], columns=feature_columns)\n",
    "\n",
    "            # Scale input data\n",
    "            input_scaled = scaler.transform(input_df)\n",
    "\n",
    "            # Predict disease\n",
    "            prediction = model.predict(input_scaled)[0]\n",
    "            disease_name = label_encoder.inverse_transform([prediction])[0]\n",
    "\n",
    "            return JsonResponse({\"disease\": disease_name})\n",
    "\n",
    "        except Exception as e:\n",
    "            print(f\"‚ùå Error: {e}\")\n",
    "            return JsonResponse({\"error\": str(e)})\n",
    "\n",
    "    return render(request, 'predictor/predict.html')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "72372841-ef93-4e9e-996a-63519e1adf73",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
